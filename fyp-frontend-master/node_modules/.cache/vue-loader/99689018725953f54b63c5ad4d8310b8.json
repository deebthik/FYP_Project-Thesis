{"remainingRequest":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/views/Exporter.vue?vue&type=template&id=1f6afd1b&scoped=true&","dependencies":[{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/views/Exporter.vue","mtime":1592202869944},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1592166926247},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1592166926959},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1592166926247},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/vue-loader/lib/index.js","mtime":1592166926959}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}