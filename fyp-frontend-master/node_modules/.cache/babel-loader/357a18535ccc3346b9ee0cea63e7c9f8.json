{"remainingRequest":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/babel-loader/lib/index.js!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/eslint-loader/index.js??ref--13-0!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/createClient.js","dependencies":[{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/createClient.js","mtime":1592162161108},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1592166926247},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/babel-loader/lib/index.js","mtime":1592166926227},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/eslint-loader/index.js","mtime":1592166926419}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4iKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZyIpOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIik7Cgp2YXIgX2FzeW5jVG9HZW5lcmF0b3IgPSByZXF1aXJlKCIvaG9tZS9zYXNoYW5rL0RvY3VtZW50cy9GWVAvY29mZmVlLXN1cHBseS1jaGFpbi9mcm9udC1lbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciIpOwoKdmFyIGZzID0gcmVxdWlyZSgnZnMnKTsKCnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2ZhYnJpYy1uZXR3b3JrJyksCiAgICBGaWxlU3lzdGVtV2FsbGV0ID0gX3JlcXVpcmUuRmlsZVN5c3RlbVdhbGxldCwKICAgIFg1MDlXYWxsZXRNaXhpbiA9IF9yZXF1aXJlLlg1MDlXYWxsZXRNaXhpbjsKCnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpOwoKdmFyIG5ldHdvcmtQYXRoID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL25ldHdvcmsnKTsKdmFyIHdhbGxldCA9IG5ldyBGaWxlU3lzdGVtV2FsbGV0KCcuL3dhbGxldCcpOwptb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgdmFyIGNyZWRQYXRoLCBjZXJ0LCBrZXksIGlkZW50aXR5TGFiZWwsIGlkZW50aXR5OwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgY3JlZFBhdGggPSBwYXRoLmpvaW4obmV0d29ya1BhdGgsICcvY3J5cHRvLWNvbmZpZy9wZWVyT3JnYW5pemF0aW9ucy9mYXJtaW5zcGVjdG9yLnN1cHBseWNoYWluLmNvbS91c2Vycy9BZG1pbkBmYXJtaW5zcGVjdG9yLnN1cHBseWNoYWluLmNvbScpOwogICAgICAgICAgY2VydCA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oY3JlZFBhdGgsICcvbXNwL3NpZ25jZXJ0cy9BZG1pbkBmYXJtaW5zcGVjdG9yLnN1cHBseWNoYWluLmNvbS1jZXJ0LnBlbScpKS50b1N0cmluZygpOwogICAgICAgICAga2V5ID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihjcmVkUGF0aCwgJy9tc3Ava2V5c3RvcmUvNjQzMzg0MjhjMGQzNGRmMjc1MmNkNjY1YTc2YzgyZjc2NTNlYTk3NzU1NjJiYzBlYzNiOTZmMzhkNGY3OTE2NV9zaycpKS50b1N0cmluZygpOwogICAgICAgICAgaWRlbnRpdHlMYWJlbCA9ICdBZG1pbkBmYXJtaW5zcGVjdG9yLnN1cHBseWNoYWluLmNvbSc7CiAgICAgICAgICBpZGVudGl0eSA9IFg1MDlXYWxsZXRNaXhpbi5jcmVhdGVJZGVudGl0eSgnRmFybUluc3BlY3Rvck1TUCcsIGNlcnQsIGtleSk7CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgIHJldHVybiB3YWxsZXQuZXhpc3RzKGlkZW50aXR5TGFiZWwpOwoKICAgICAgICBjYXNlIDg6CiAgICAgICAgICBpZiAoX2NvbnRleHQuc2VudCkgewogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgIHJldHVybiB3YWxsZXQuaW1wb3J0KGlkZW50aXR5TGFiZWwsIGlkZW50aXR5KTsKCiAgICAgICAgY2FzZSAxMToKICAgICAgICAgIGNvbnNvbGUubG9nKCJJZGVudGl0eSBjcmVhdGVkIGFuZCBpbXBvcnRlZCB0byB3YWxsZXQiKTsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDE0OgogICAgICAgICAgY29uc29sZS5sb2coIklkZW50aXR5IGNyZWF0aW9uIHNraXBwZWQgYXMgdGhlIGlkZW50aXR5IGFscmVhZHkgZXhpc3RzIGluIHRoZSB3YWxsZXQiKTsKCiAgICAgICAgY2FzZSAxNToKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDE3OgogICAgICAgICAgX2NvbnRleHQucHJldiA9IDE3OwogICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJFcnJvciBhZGRpbmcgdG8gd2FsbGV0LiAiLmNvbmNhdChfY29udGV4dC50MCkpOwogICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQudDAuc3RhY2spOwoKICAgICAgICBjYXNlIDIxOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCAxN11dKTsKfSkpOw=="},{"version":3,"sources":["/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/createClient.js"],"names":["fs","require","FileSystemWallet","X509WalletMixin","path","networkPath","resolve","__dirname","wallet","module","exports","credPath","join","cert","readFileSync","toString","key","identityLabel","identity","createIdentity","exists","import","console","log","stack"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;eAC8CA,OAAO,CAAC,gBAAD,C;IAA7CC,gB,YAAAA,gB;IAAkBC,e,YAAAA,e;;AAC1B,IAAMC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMI,WAAW,GAAGD,IAAI,CAACE,OAAL,CAAaC,SAAb,EAAwB,kBAAxB,CAApB;AACA,IAAMC,MAAM,GAAG,IAAIN,gBAAJ,CAAqB,UAArB,CAAf;AAEAO,MAAM,CAACC,OAAP,wEAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHC,UAAAA,QAFG,GAEQP,IAAI,CAACQ,IAAL,CAAUP,WAAV,EAAuB,0GAAvB,CAFR;AAGHQ,UAAAA,IAHG,GAGIb,EAAE,CAACc,YAAH,CAAgBV,IAAI,CAACQ,IAAL,CAAUD,QAAV,EAAoB,6DAApB,CAAhB,EAAoGI,QAApG,EAHJ;AAIHC,UAAAA,GAJG,GAIGhB,EAAE,CAACc,YAAH,CAAgBV,IAAI,CAACQ,IAAL,CAAUD,QAAV,EAAoB,mFAApB,CAAhB,EAA0HI,QAA1H,EAJH;AAMHE,UAAAA,aANG,GAMa,qCANb;AAOHC,UAAAA,QAPG,GAOQf,eAAe,CAACgB,cAAhB,CAA+B,kBAA/B,EAAmDN,IAAnD,EAAyDG,GAAzD,CAPR;AAAA;AAAA,iBAQGR,MAAM,CAACY,MAAP,CAAcH,aAAd,CARH;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iBASCT,MAAM,CAACa,MAAP,CAAcJ,aAAd,EAA6BC,QAA7B,CATD;;AAAA;AAULI,UAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AAVK;AAAA;;AAAA;AAYLD,UAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;;AAZK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBTD,UAAAA,OAAO,CAACC,GAAR;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAMC,KAAlB;;AAjBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst { FileSystemWallet, X509WalletMixin } = require('fabric-network');\nconst path = require('path');\n\nconst networkPath = path.resolve(__dirname, '../../../network');\nconst wallet = new FileSystemWallet('./wallet');\n\nmodule.exports = async () => {\n    try {\n        const credPath = path.join(networkPath, '/crypto-config/peerOrganizations/farminspector.supplychain.com/users/Admin@farminspector.supplychain.com');\n        const cert = fs.readFileSync(path.join(credPath, '/msp/signcerts/Admin@farminspector.supplychain.com-cert.pem')).toString();\n        const key = fs.readFileSync(path.join(credPath, '/msp/keystore/64338428c0d34df2752cd665a76c82f7653ea9775562bc0ec3b96f38d4f79165_sk')).toString();\n\n        const identityLabel = 'Admin@farminspector.supplychain.com'\n        const identity = X509WalletMixin.createIdentity('FarmInspectorMSP', cert, key)\n        if (!(await wallet.exists(identityLabel))) {\n            await wallet.import(identityLabel, identity);\n            console.log(\"Identity created and imported to wallet\")\n        } else {\n            console.log(\"Identity creation skipped as the identity already exists in the wallet\")\n        }\n\n    } catch (error) {\n        console.log(`Error adding to wallet. ${error}`);\n        console.log(error.stack);\n    }\n}"]}]}