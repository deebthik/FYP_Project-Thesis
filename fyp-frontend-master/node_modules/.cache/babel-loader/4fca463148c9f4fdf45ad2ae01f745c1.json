{"remainingRequest":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/babel-loader/lib/index.js!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/eslint-loader/index.js??ref--13-0!/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/fabricClient.js","dependencies":[{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/fabricClient.js","mtime":1592162126797},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1592166926247},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/babel-loader/lib/index.js","mtime":1592166926227},{"path":"/home/sashank/Documents/FYP/coffee-supply-chain/front-end/node_modules/eslint-loader/index.js","mtime":1592166926419}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/sashank/Documents/FYP/coffee-supply-chain/front-end/src/assets/fabricClient.js"],"names":["fs","require","yaml","createClient","FileSystemWallet","Gateway","wallet","module","exports","createBatch","cultivationData","gateway","userName","connectionProfile","safeLoad","readFileSync","connectionOptions","identity","clientTlsIdentity","discovery","enabled","asLocalhost","console","log","connect","getNetwork","network","getContract","contract","submitTransaction","queryResponse","JSON","parse","toString","stack","disconnect","updateBatch","batchID","nextStage","nextStageData","queryBatch","evaluateTransaction","queryBatchList","testCreate","testUpdate"],"mappings":"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","sourcesContent":["'use strict';\n\n// Bring key classes into scope, most importantly Fabric SDK network class\nconst fs = require('fs');\nconst yaml = require('js-yaml');\nconst createClient = require('./createClient.js')\nconst { FileSystemWallet, Gateway } = require('fabric-network');\nconst wallet = new FileSystemWallet('./wallet');\n\nmodule.exports = {\n    /** \n     * Function to create a batch that starts off the supply chain.\n     * @param {string} cultivationData the batch data to be stored on creation\n     * @returns {string} a string representing a unique batchID to identify the created batch\n     */\n    createBatch: async (cultivationData) => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                clientTlsIdentity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('Submit createBatch transaction.');\n            const queryResponse = await contract.submitTransaction('createBatch', cultivationData);\n            return JSON.parse(queryResponse.toString());\n\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    },\n\n    /** \n     * Function to update details for existing batch of the supply chain\n     * @param {string} batchID the id of the batch to be updated\n     * @param {string} nextStage the stage that is being updated\n     * @param {string} nextStageData the data relating to the stage that is being updated\n     */\n    updateBatch: async (batchID, nextStage, nextStageData) => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                clientTlsIdentity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('Submit updateBatch transaction.');\n            const queryResponse = await contract.submitTransaction('updateBatch', batchID, nextStage, nextStageData);\n            return JSON.parse(queryResponse.toString());\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    },\n\n    /** \n     * function the fetch details of one batch\n     * @param {string} batchID the id of the batch to be queried\n     * @returns A json object with data from all stages for the particular batch\n     */\n    queryBatch: async (batchID) => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                clientTlsIdentity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('Evaluate QueryBatch transaction.');\n            const queryResponse = await contract.evaluateTransaction('queryBatch', batchID);\n            return JSON.parse(queryResponse.toString())\n\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    },\n\n    /**\n     * Function to query list of all existing batches\n     * @returns A json array with the list of all batches\n     */\n    queryBatchList: async () => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                clientTlsIdentity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('Evaluate QueryBatchList transaction.');\n            const queryResponse = await contract.evaluateTransaction('queryBatchList');\n            return JSON.parse(queryResponse.toString());\n\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    },\n\n    /**\n     * Function to create a batch using hardcoded data\n     */\n    testCreate: async () => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('submit testCreate transaction.');\n            const queryResponse = await contract.submitTransaction('testCreate');\n            return JSON.parse(queryResponse.toString());\n\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    },\n\n    /**\n     * Function to update a batch using hardcoded data\n     * @param {string} batchID the id of the batch to be updated\n     */\n    testUpdate: async (batchID) => {\n        await createClient();\n        const gateway = new Gateway();\n\n        try {\n            const userName = 'Admin@farminspector.supplychain.com'\n            let connectionProfile = yaml.safeLoad(fs.readFileSync('./config.yaml', 'utf8'));\n            let connectionOptions = {\n                identity: userName,\n                clientTlsIdentity: userName,\n                wallet: wallet,\n                discovery: { enabled: true, asLocalhost: true }\n            };\n\n            console.log('Connecting to Fabric gateway.');\n            await gateway.connect(connectionProfile, connectionOptions);\n\n            console.log('Use network channel: scchannel.');\n            const network = await gateway.getNetwork('scchannel');\n\n            // Get addressability to commercial paper contract\n            console.log('Use supplycc smart contract.');\n            const contract = await network.getContract('supplycc');\n\n            console.log('Submit testUpdate transaction.');\n            const queryResponse = await contract.submitTransaction('testUpdate', batchID);\n            return JSON.parse(queryResponse.toString());\n\n        } catch (error) {\n            console.log(`Error processing transaction. ${error}`);\n            console.log(error.stack);\n        } finally {\n            console.log('Disconnect from Fabric gateway.');\n            gateway.disconnect();\n        }\n    }\n}"]}]}